# 簡易仕様書サンプル

### 作者
飛田貴之

### アプリ名
RestaurantSearcher

#### コンセプト
シンプルで分かり易く

#### こだわったポイント
- コンポーネント化やロジックとビューを分離し、保守性を意識しました。
- APIから先に全件取得し、詳細ページで再フェッチが起こらないようにUXを意識しました。
- TSを使い、型安全性を強化しました。

### デザイン面でこだわったポイント
シンプルで分かり易くを前提に、デザインの4原則を意識しながら、
ユーザーが使う場合に優先度や注目されるところを意識してデザインしました。

### 公開したアプリの URL（Store にリリースしている場合）
https://fenrir-five.vercel.app/

### 該当プロジェクトのリポジトリ URL（GitHub,GitLab など Git ホスティングサービスを利用されている場合）
https://github.com/taka-0305/fenrir

## 開発環境
### 開発環境
VSCode 1.98.1


### フレームワーク・言語など
- フレームワーク: Next.js@15.2.3（App Router構成）
- 言語: TypeScript
- スタイル: SCSS Modules
- Linter: ESLint（フォーマッター: stylish）
- フォーマッター: Prettier（`.prettierrc` にて設定）

### テーブル定義(ER図)などの設計ドキュメント（ウェブアプリ）
テーブルはないため、フロー図を記載します。
[ユーザー操作]
     ↓
Geolocation API（現在地取得）
     ↓
Hotpepper API（検索）
     ↓
レスポンス（全件取得 → フロントで10件ずつ表示）
     ↓
詳細表示（Contextでデータ保持）

### 開発環境構築手順(ウェブアプリ)
- git clone https://github.com/taka-0305/fenrir.git
- .env.exampleをコピーし、.envにリネーム。
- .env HOTPEPPER_API_KEYにホットペッパーグルメサーチAPIを利用するためのAPIキーを記載
- cd ./fenrir
- docker-compose up --build

## 動作対象端末・OS
### 動作対象OS
- Windows / macOS / Linux 各種OS（※主要ブラウザで確認）

### 対応ブラウザ（私が確認済みのもの）
- Google Chrome（最新版）
- Microsoft Edge（最新版）
- Firefox（最新版）

## 開発期間
7日間

## アプリケーション機能
### 画面一覧
- 検索画面
- 検索結果画面
- 詳細画面

### 機能概要
#### 検索画面
- Geolocation APIで現在地取得
- ホットペッパーAPIと連携し、条件で店舗を検索
- 検索条件：現在地、キーワード、範囲

#### 検索結果画面
- 画像・店名・アクセス・予算を一覧表示
- ページング対応（10件ごと前後移動）

#### 詳細画面
- 店舗画像 / 情報 / 詳細項目を表形式で表示
- 戻るボタン、ホットペッパー外部リンクあり

### 使用しているAPI,SDK,ライブラリなど
- ホットペッパーグルメサーチAPI
- Geolocation API（ブラウザ標準）
- Next.js / React / TypeScript / SCSS Modules / ESLint / Prettier

### 技術面でアドバイスして欲しいポイント
ディレクトリ構成や hooks・components の粒度、命名のベストプラクティス

### 今後実装すべき機能
- 地図アプリと連携した店舗の地図表示機能
- アカウントを管理
- レビューやブックマーク、店舗のリスト作成、共有機能
- レスポンシブ対応
- 店舗の予約機能
- メニュー表示機能
- データを活用した混雑予測

### 自己評価
諸事情により、短期間での開発ではあったが、機能実装よりもアーキテクチャ設計や保守性に重きを置いて開発しました。
Gitの活用やCIは十分でなかったが、今後のチーム開発を見据えた再利用性・拡張性あるコード構成を意識しました。